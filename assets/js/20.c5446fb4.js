(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{379:function(e,t,n){"use strict";n.r(t);var i=n(42),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"notes-on-production-deployment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#notes-on-production-deployment"}},[e._v("#")]),e._v(" Notes on Production Deployment")]),e._v(" "),n("ul",[n("li",[e._v("See "),n("a",{attrs:{href:"https://docs.tendermint.com/master/tendermint-core/running-in-production.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tendermint notes on running in production"),n("OutboundLink")],1),e._v(" and "),n("a",{attrs:{href:"https://docs.tendermint.com/master/tendermint-core/validators.html#setting-up-a-validator",target:"_blank",rel:"noopener noreferrer"}},[e._v("notes on setting up a validator"),n("OutboundLink")],1)]),e._v(" "),n("li",[e._v("Validators shouldn’t be exposed directly to the internet")]),e._v(" "),n("li",[e._v("RPC shouldn’t be exposed directly to the internet (as it currently doesn’t support rate-limiting, authentication…)")]),e._v(" "),n("li",[e._v("Validator block signing should be via "),n("a",{attrs:{href:"https://github.com/iqlusioninc/tmkms",target:"_blank",rel:"noopener noreferrer"}},[e._v("tmkms"),n("OutboundLink")],1)])]),e._v(" "),n("h2",{attrs:{id:"setting-up-tendermint-kms-for-signing-blocks-only-for-validators-council-nodes"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-tendermint-kms-for-signing-blocks-only-for-validators-council-nodes"}},[e._v("#")]),e._v(" Setting up Tendermint KMS for signing blocks (only for validators / council nodes)")]),e._v(" "),n("p",[e._v("Currently (tmkms v0.7), the system is still a bit Cosmos-centric, so the setup is slightly quirky.")]),e._v(" "),n("h3",{attrs:{id:"configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),n("p",[e._v("As per the "),n("a",{attrs:{href:"https://github.com/iqlusioninc/tmkms/blob/develop/tmkms.toml.example",target:"_blank",rel:"noopener noreferrer"}},[e._v("example"),n("OutboundLink")],1),e._v(", create "),n("code",[e._v("~/.tmkms/tmkms.toml")]),e._v(" (or any path) with something like:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('[[chain]]\nid = "<CHAIN_ID>"\nkey_format = { type = "hex" }\n\n[[validator]]\naddr = "unix:///<TMKMS_SOCKET_PATH>"\nchain_id = "<CHAIN_ID>"\n\n[[providers.<USED SIGNING PROVIDER>]]\nchain_ids = ["<CHAIN_ID>"]\n')])])]),n("p",[e._v("In "),n("code",[e._v("~/.tendermint/config/config.toml")]),e._v(" (or wherever located), set the socket address to the same one as in "),n("code",[e._v("tmkms.toml")]),e._v(":")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('priv_validator_laddr = "unix:///<TMKMS_SOCKET_PATH>"\n')])])]),n("h3",{attrs:{id:"obtaining-the-consensus-validator-public-key"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#obtaining-the-consensus-validator-public-key"}},[e._v("#")]),e._v(" Obtaining the consensus / validator public key")]),e._v(" "),n("h4",{attrs:{id:"step-0-generate-initialize-the-keypair-or-seed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-0-generate-initialize-the-keypair-or-seed"}},[e._v("#")]),e._v(" Step 0. generate / initialize the keypair or seed")]),e._v(" "),n("p",[e._v("Step 0 depends on the signing provider -- e.g. for Ledger devices, one may need to enable "),n("em",[e._v("developer mode")]),e._v(" in Ledger Live settings and install the Tendermint validator app.")]),e._v(" "),n("h4",{attrs:{id:"step-1-obtain-the-public-key-in-the-correct-encoding"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-1-obtain-the-public-key-in-the-correct-encoding"}},[e._v("#")]),e._v(" Step 1. obtain the public key in the correct encoding")]),e._v(" "),n("p",[e._v("Depending on the signing provider, there may be a command to print out the public key. One other option is to run "),n("code",[e._v("tmkms start -c .tmkms/tmkms.toml -v")]),e._v(" where "),n("code",[e._v("-v")]),e._v(" is for verbose logging; the log may then include a message "),n("code",[e._v("... added consensus key <KEY_HEX_PAYLOAD>")]),e._v(".")]),e._v(" "),n("p",[e._v("The public key hex payload is Amino-encoded -- for the use in Tendermint configurations, there are two steps that need to be done:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("strip off the Amino prefix; in the case of Ed25519 public keys, it's 5 bytes: 0x16, 0x24, 0xDE, 0x64, 0x20.")])]),e._v(" "),n("li",[n("p",[e._v("convert the stripped-off "),n("code",[e._v("KEY_HEX_PAYLOAD")]),e._v(" to base64.")])])]),e._v(" "),n("h4",{attrs:{id:"step-2-place-use-the-public-key-where-needed"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-2-place-use-the-public-key-where-needed"}},[e._v("#")]),e._v(" Step 2. place / use the public key where needed")]),e._v(" "),n("p",[e._v("For example, generate the "),n("code",[e._v("genesis.json")]),e._v(" with it if the corresponding node is one of the initial validators / council nodes.")]),e._v(" "),n("h4",{attrs:{id:"step-3-start-up-everything"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-3-start-up-everything"}},[e._v("#")]),e._v(" Step 3. start up everything")]),e._v(" "),n("p",[e._v("As before, but along with "),n("code",[e._v("tendermint node")]),e._v(", "),n("code",[e._v("tmkms start -c .tmkms/tmkms.toml")]),e._v(" should also be launched.")])])}),[],!1,null,null,null);t.default=r.exports}}]);