(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{387:function(e,t,a){"use strict";a.r(t);var n=a(42),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"transaction-privacy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction-privacy"}},[e._v("#")]),e._v(" Transaction Privacy")]),e._v(" "),a("h2",{attrs:{id:"motivation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#motivation"}},[e._v("#")]),e._v(" Motivation")]),e._v(" "),a("p",[e._v("Payment data need confidentiality for many reasons, including compliance with different privacy regulations, fungibility properties etc. While confidentiality can be achieved through different means, Crypto.com Chain leverages symmetric encryption in "),a("em",[e._v("Trusted Execution Environments")]),e._v(" ("),a("strong",[e._v("TEE")]),e._v(") for the following benefits:")]),e._v(" "),a("ul",[a("li",[a("p",[a("em",[e._v("Flexibility")]),e._v(" in terms of what computation can be done and how the data schema can evolve.\nAs requirements for Crypto.com Chain change, it's important that the existing code and data remain\nforwards-compatible. For example, one may extend the transaction format to support new signature schemes.")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("Auditability with potentially fine-grained access control mechanisms")]),e._v(":\nin the initial implementation, it's a separation of the permission to spend and the permission\nto view transaction data, but it could be more flexible and fine-grained (e.g.\npermission to view certain parts of transaction data).")])]),e._v(" "),a("li",[a("p",[a("em",[e._v("Performance due to a low overhead")]),e._v(": unlike, for example, fully homomorphic encryption in software,\nthe overhead of executing computation in TEE should be minimal\nand the main cryptographic primitive is symmetric encryption which can be accelerated\nby dedicated CPU instructions, such as AES-NI.")])])]),e._v(" "),a("h2",{attrs:{id:"payloads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#payloads"}},[e._v("#")]),e._v(" Payloads")]),e._v(" "),a("p",[e._v("Depending on the transaction type (see "),a("a",{attrs:{href:"./transaction"}},[e._v("transaction types")]),e._v(" and its "),a("a",{attrs:{href:"https://github.com/crypto-com/chain-docs/blob/master/docs/modules/transactions.md#transaction-processing",target:"_blank",rel:"noopener noreferrer"}},[e._v("processing"),a("OutboundLink")],1),e._v("), some of its parts (transaction data, witness or both) need to be obfuscated. In that case, the broadcasted transaction binary payload includes:")]),e._v(" "),a("ul",[a("li",[e._v("Transaction ID (if the transaction data is obfuscated)")]),e._v(" "),a("li",[e._v("List of transaction inputs (if relevant) and the number of outputs (if relevant)")]),e._v(" "),a("li",[e._v("Symmetric encryption-related metadata (key generation, nonce / initialization vector)")]),e._v(" "),a("li",[e._v("Obfuscated payload")])]),e._v(" "),a("p",[e._v("The encryption inside enclaves (see "),a("a",{attrs:{href:"./enclave-architecture"}},[e._v("enclave architecture")]),e._v(") is done using “authenticated encryption with associated data” (AEAD) scheme – the initial planned algorithm is "),a("a",{attrs:{href:"https://tools.ietf.org/html/rfc8452",target:"_blank",rel:"noopener noreferrer"}},[e._v("AEAD_AES_128_GCM_SIV"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"periodic-key-generation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#periodic-key-generation"}},[e._v("#")]),e._v(" Periodic key generation")]),e._v(" "),a("p",[e._v("The active set of validators is involved in periodic generation of new keys that are then used by all full node enclaves on the network – the key distribution is done over mutually attested secure channels (see "),a("a",{attrs:{href:"./enclave-architecture"}},[e._v("enclave architecture")]),e._v(").")])])}),[],!1,null,null,null);t.default=i.exports}}]);