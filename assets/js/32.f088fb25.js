(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{395:function(t,a,e){"use strict";e.r(a);var n=e(42),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"staking-states-and-transitions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#staking-states-and-transitions"}},[t._v("#")]),t._v(" Staking states and transitions")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" StakedState "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    address"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" StakedStateAddress"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    nonce"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u64"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bonded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Coin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    unbonded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Coin"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    unbonded_from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Timespec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    validator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Option"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Validator"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Validator "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    council_node"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CouncilNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    jailed_until"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Option"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Timespec"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    inactive_time"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Option"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Timespec"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    used_validator_keys"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TendermintValidatorPubKey"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Timespec"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"states"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#states"}},[t._v("#")]),t._v(" States")]),t._v(" "),e("h3",{attrs:{id:"clean-staking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clean-staking"}},[t._v("#")]),t._v(" Clean staking")]),t._v(" "),e("p",[e("code",[t._v("validator.is_none()")])]),t._v(" "),e("h3",{attrs:{id:"validator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#validator"}},[t._v("#")]),t._v(" Validator")]),t._v(" "),e("p",[e("code",[t._v("validator.is_some()")])]),t._v(" "),e("p",[t._v("There are several variants of it:")]),t._v(" "),e("h4",{attrs:{id:"active"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#active"}},[t._v("#")]),t._v(" Active")]),t._v(" "),e("p",[e("code",[t._v("validator.inactive_time.is_none()")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[e("em",[t._v("NOTE:")])]),t._v(" Active validator doesn't necessarily mean the final validator take effect in tendermint, please refer to\n"),e("a",{attrs:{href:"#choose-final-validators"}},[t._v("Choose final validators")])])]),t._v(" "),e("h4",{attrs:{id:"inactive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inactive"}},[t._v("#")]),t._v(" Inactive")]),t._v(" "),e("p",[e("code",[t._v("validator.inactive_time.is_some()")])]),t._v(" "),e("h4",{attrs:{id:"jailed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jailed"}},[t._v("#")]),t._v(" Jailed")]),t._v(" "),e("p",[e("code",[t._v("validator.jailed_until.is_some()")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[e("em",[t._v("NOTE:")])]),t._v(" Jailed implies inactive, but not vice versa")])]),t._v(" "),e("h2",{attrs:{id:"state-transitions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#state-transitions"}},[t._v("#")]),t._v(" State transitions")]),t._v(" "),e("h3",{attrs:{id:"from-clean-staking-or-inactive-unjailed-validator-to-active-validator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from-clean-staking-or-inactive-unjailed-validator-to-active-validator"}},[t._v("#")]),t._v(' From "clean staking" or "inactive(unjailed) validator" to active validator')]),t._v(" "),e("h4",{attrs:{id:"node-join"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#node-join"}},[t._v("#")]),t._v(" Node join")]),t._v(" "),e("p",[t._v("The only way to transit to active validator is by executing "),e("code",[t._v("NodeJoinTx")]),t._v(", the preconditions are:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("bonded >= min_required_staking")])]),t._v(" "),e("li",[t._v("The validator pubkey/address is not already used by others, it's ok to re-use the old keys used by itself if it's a re-join from an inactive validator.")]),t._v(" "),e("li",[t._v("Not jailed if transiting from inactive validator")])]),t._v(" "),e("h3",{attrs:{id:"from-active-validator-to-inactive-validator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from-active-validator-to-inactive-validator"}},[t._v("#")]),t._v(' From "active validator" to "inactive validator"')]),t._v(" "),e("p",[t._v("There are several cases for this:")]),t._v(" "),e("h4",{attrs:{id:"bonded-coins-become-lower-than-required"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bonded-coins-become-lower-than-required"}},[t._v("#")]),t._v(" Bonded coins become lower than required")]),t._v(" "),e("p",[t._v("When "),e("code",[t._v("bonded < min_required_staking")]),t._v(", this transition happens.")]),t._v(" "),e("p",[t._v("The reasons for dropping of bonded coins maybe:")]),t._v(" "),e("ul",[e("li",[t._v("Execute "),e("code",[t._v("UnbondTx")]),t._v(" at "),e("code",[t._v("deliver_tx")]),t._v(" event")]),t._v(" "),e("li",[t._v("Slashed for non-live or byzantine faults at "),e("code",[t._v("begin_block")]),t._v(" event")])]),t._v(" "),e("blockquote",[e("p",[e("strong",[e("em",[t._v("NOTE:")])]),t._v(" The transition happens immediately in "),e("code",[t._v("deliver_tx")]),t._v(" or "),e("code",[t._v("begin_block")]),t._v(" events, won't reverse automatically\nwhen bonded coins become enough again even in the same block, so the activeness is always well-defined during the\nwhole process.")])]),t._v(" "),e("h4",{attrs:{id:"jailed-for-byzantine-faults"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jailed-for-byzantine-faults"}},[t._v("#")]),t._v(" Jailed for byzantine faults")]),t._v(" "),e("p",[t._v("Jailed always implies inactive.")]),t._v(" "),e("p",[t._v("This happens in "),e("code",[t._v("begin_block")]),t._v(" event.")]),t._v(" "),e("h3",{attrs:{id:"from-jailed-validator-to-inactive-unjailed-validator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from-jailed-validator-to-inactive-unjailed-validator"}},[t._v("#")]),t._v(' From "jailed validator" to "inactive(unjailed) validator"')]),t._v(" "),e("h4",{attrs:{id:"unjail"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unjail"}},[t._v("#")]),t._v(" Unjail")]),t._v(" "),e("p",[t._v("The only way to leave jailed validator state is by executing "),e("code",[t._v("UnjailTx")]),t._v(", the preconditions are:")]),t._v(" "),e("ul",[e("li",[t._v("Already jailed")]),t._v(" "),e("li",[e("code",[t._v("block_time >= jailed_until")])])]),t._v(" "),e("h3",{attrs:{id:"from-inactive-validator-to-clean-staking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#from-inactive-validator-to-clean-staking"}},[t._v("#")]),t._v(' From "inactive validator" to "clean staking"')]),t._v(" "),e("h4",{attrs:{id:"clean-up"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#clean-up"}},[t._v("#")]),t._v(" Clean up")]),t._v(" "),e("p",[t._v("The clean up procedure will remove the validator record if:")]),t._v(" "),e("ul",[e("li",[t._v("Not jailed")]),t._v(" "),e("li",[e("code",[t._v("block_time >= inactive_time + cleanup_period")])])]),t._v(" "),e("blockquote",[e("p",[e("em",[e("strong",[t._v("NOTE:")])]),t._v(" "),e("code",[t._v("cleanup_period")])]),t._v(" "),e("p",[t._v("Currently "),e("code",[t._v("cleanup_period = unbonding_period")]),t._v(", but logically, "),e("code",[t._v("cleanup_period")]),t._v(" only needs such constraints:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("> max_evidence_age")]),t._v(", so we can handle delayed byzantine evidences (inactive validator can still be slashed for\nlater detected byzantine faults)")]),t._v(" "),e("li",[e("code",[t._v("> 2 blocks")]),t._v(", so we don't panic when seeing signing vote of inactivated validators")])])]),t._v(" "),e("h2",{attrs:{id:"appendix"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#appendix"}},[t._v("#")]),t._v(" Appendix")]),t._v(" "),e("h3",{attrs:{id:"choose-final-validators"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#choose-final-validators"}},[t._v("#")]),t._v(" Choose final validators")]),t._v(" "),e("p",[t._v("The final validator set that take effect in tendermint is chosen at "),e("code",[t._v("end_block")]),t._v(" event by:")]),t._v(" "),e("ul",[e("li",[t._v("Sort all the active validators by "),e("code",[t._v("voting_power desc, staking_address")])]),t._v(" "),e("li",[t._v("Take the first "),e("code",[t._v("max_validators")]),t._v(" ones")])]),t._v(" "),e("p",[t._v("The abci protocol of "),e("code",[t._v("end_block")]),t._v(" event expect validator set updates in response, so we need to diff the new set against\nthe current set to get the updates.")]),t._v(" "),e("p",[t._v("For example, assuming "),e("code",[t._v("max_validators = 3")]),t._v(", if you are the fourth active validator, so you are not chosen yet, but in\nthe future if any validator in the top 3 quit, you will be chosen automatically at the next "),e("code",[t._v("end_block")]),t._v(" event:")]),t._v(" "),e("div",{staticClass:"language-yaml extra-class"},[e("pre",{pre:!0,attrs:{class:"language-yaml"}},[e("code",[t._v("max_validators = 3\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("genesis")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  validators (map of validator address to voting power)"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr1 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 10\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr2 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 9\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("block1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  deliver_tx\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" join_node(addr3"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 8)\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" join_node(addr4"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" 7)\n  active validators"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr1 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 10\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr2 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 9\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 8\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr4 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 7\n  end_block validator updates"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 8\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("block2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("deliver_tx")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" unbond_all(addr1)\n  active validators"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr2 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 9\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr3 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 8\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr4 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 7\n  end_block validator updates"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr1 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 0\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" addr4 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),t._v(" 7\n")])])]),e("h3",{attrs:{id:"implications-of-jailing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#implications-of-jailing"}},[t._v("#")]),t._v(" Implications of jailing")]),t._v(" "),e("h4",{attrs:{id:"transactions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#transactions"}},[t._v("#")]),t._v(" Transactions")]),t._v(" "),e("p",[t._v("Only "),e("code",[t._v("UnjailTx")]),t._v(" is allowed to be executed on a jailed staking if the "),e("code",[t._v("jailed_until")]),t._v(" time is passed.")]),t._v(" "),e("p",[t._v("Disallowed transactions are:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("DepositTx")])]),t._v(" "),e("li",[e("code",[t._v("WithdrawTx")])]),t._v(" "),e("li",[e("code",[t._v("UnbondTx")])]),t._v(" "),e("li",[e("code",[t._v("NodeJoinTx")])])]),t._v(" "),e("h4",{attrs:{id:"reward-distribution"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reward-distribution"}},[t._v("#")]),t._v(" Reward distribution")]),t._v(" "),e("p",[t._v("It won't distribute rewards to jailed validators, inactive(unjailed) validators will get the rewards as normal.")]),t._v(" "),e("p",[t._v("When a validator is jailed, it's reward participation tracking records are removed immediately.")]),t._v(" "),e("h4",{attrs:{id:"process-byzantine-faults"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#process-byzantine-faults"}},[t._v("#")]),t._v(" Process byzantine faults")]),t._v(" "),e("p",[t._v("Jailed validators won't be slashed again for byzantine faults detected in jailing period.")]),t._v(" "),e("h3",{attrs:{id:"nonce"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nonce"}},[t._v("#")]),t._v(" Nonce")]),t._v(" "),e("p",[t._v("The nonce is the number of transactions that have the witness of the staking address, which includes:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("WithdrawTx")])]),t._v(" "),e("li",[e("code",[t._v("UnbondTx")])]),t._v(" "),e("li",[e("code",[t._v("UnjailTx")])]),t._v(" "),e("li",[e("code",[t._v("NodeJoinTx")])])]),t._v(" "),e("h3",{attrs:{id:"liveness-tracking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#liveness-tracking"}},[t._v("#")]),t._v(" Liveness tracking")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("All active validators's liveness trackers are maintained no matter if it's chosen into the "),e("a",{attrs:{href:"#choose-final-validators"}},[t._v("final validator set")]),t._v(".")]),t._v(" "),e("p",[t._v("If it doesn't appear in the votes reported by tendermint, it's recorded as a "),e("code",[t._v("true")]),t._v(" which means live by default.")])]),t._v(" "),e("li",[e("p",[t._v("Inactive validator's liveness trackers are also maintained, and recorded as a "),e("code",[t._v("true")]),t._v(" for each block, this serves two purposes:")]),t._v(" "),e("ul",[e("li",[t._v("After a validator inactivated, the signing vote might still arrive for the next two blocks, we don't want to issue a\nfalse warning in this case.")]),t._v(" "),e("li",[t._v("Validator might quit and re-join very fast (by "),e("code",[t._v("UnbondTx")]),t._v("/"),e("code",[t._v("DepositTx")]),t._v("/"),e("code",[t._v("NodeJoinTx")]),t._v("), in this case it's liveness\ntracking record is preserved.")])])])]),t._v(" "),e("p",[t._v("It means the liveness tracker is only removed when validator record get "),e("a",{attrs:{href:"#clean-up"}},[t._v("cleaned up")]),t._v(".")]),t._v(" "),e("h3",{attrs:{id:"inactive-validator-re-join-with-different-validator-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inactive-validator-re-join-with-different-validator-key"}},[t._v("#")]),t._v(" Inactive validator re-join with different validator key")]),t._v(" "),e("p",[t._v("When an inactive validator re-join, it can provide different validator key, but it still needs to be hold responsible for\nbyzantine fault committed before for as long as "),e("code",[t._v("max_evidence_age")]),t._v(". So we need to keep the old validator keys for\nsometime.")]),t._v(" "),e("p",[t._v("Whenever validator change consensus key, the old key and current block time are pushed into "),e("code",[t._v("used_validator_keys")]),t._v(", before that, the used keys older than "),e("code",[t._v("max_evidence_age")]),t._v(" are removed.")]),t._v(" "),e("p",[t._v("There is a maximum bound ("),e("code",[t._v("max_used_validator_keys")]),t._v(") on the size of "),e("code",[t._v("used_validator_keys")]),t._v(" to prevent attack. After the maximum bound reached, re-join with new validator key is not allowed.")]),t._v(" "),e("h3",{attrs:{id:"non-exists-and-empty-staking"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#non-exists-and-empty-staking"}},[t._v("#")]),t._v(" Non exists and empty staking")]),t._v(" "),e("p",[t._v("Empty staking is defined as:")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[t._v("StakedState "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    address"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    nonce"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bonded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    unbonded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    unbonded_from"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    validator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" None"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("For all the logic processing, the result of success execution should be the same for both non exists staking and empty staking.")]),t._v(" "),e("p",[t._v("The error message for failed execution maybe different, for example "),e("code",[t._v("WithdrawTx")]),t._v(" might report "),e("code",[t._v("StakingNotExists")]),t._v(" on non\nexists staking, but "),e("code",[t._v("CoinError")]),t._v(" on empty staking.")]),t._v(" "),e("p",[t._v("So the implementor should be free to choose either semantics.")])])}),[],!1,null,null,null);a.default=s.exports}}]);