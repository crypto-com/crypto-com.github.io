(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{357:function(e,t,a){e.exports=a.p+"assets/img/reward_rate.044cd69f.png"},358:function(e,t,a){e.exports=a.p+"assets/img/reward_parameters_explained.a42f9718.png"},359:function(e,t,a){e.exports=a.p+"assets/img/damping.66018182.png"},380:function(e,t,a){"use strict";a.r(t);var n=a(42),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"reward-punishment"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reward-punishment"}},[e._v("#")]),e._v(" Reward & Punishment")]),e._v(" "),n("p",[e._v("This document contains the specification of the rewards and punishment mechanisms which establish the foundation of the token ecosystem of CRO.")]),e._v(" "),n("h2",{attrs:{id:"validator-rewards"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#validator-rewards"}},[e._v("#")]),e._v(" Validator Rewards")]),e._v(" "),n("p",[e._v("To incentivise validators to run the network, rewards are accumulated and distributed to the validators. There are three sources for the rewards:")]),e._v(" "),n("ol",[n("li",[e._v("Monetary expansion with a fixed total supply")]),e._v(" "),n("li",[n("RouterLink",{attrs:{to:"/getting-started/transaction.html#transaction-fee"}},[e._v("Transaction Fees")])],1),e._v(" "),n("li",[e._v("Slashing of byzantine and non-live nodes (if any)")])]),e._v(" "),n("p",[e._v("The "),n("code",[e._v("RewardsPoolState")]),e._v(" data structure stores all the information about the remaining funds and distribution states:")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[e._v("pub struct RewardsPoolState "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    pub period_bonus"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Coin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// rewards accumulated from fees and slashing during current period")]),e._v("\n    pub last_block_height"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" BlockHeight"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// when was the pool last updated")]),e._v("\n    pub last_distribution_time"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Timespec"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// when was the pool last distributed")]),e._v("\n    pub minted"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" Coin"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// record the number of new coins ever minted, can't exceeds max supply")]),e._v("\n    pub tau"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" u64"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// a decaying parameter in monetary expansion process")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("h3",{attrs:{id:"overview-the-reward-function"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview-the-reward-function"}},[e._v("#")]),e._v(" Overview: The reward function")]),e._v(" "),n("p",[n("strong",[e._v("Motivation:")]),e._v(" To incentivise the validators, the amount of the reward should dynamically react to the actual network conditions such as the "),n("em",[e._v("total staking")]),e._v(" and the "),n("em",[e._v("length of time")]),e._v(" since the genesis block.")]),e._v(" "),n("p",[e._v("The reward being sent to the reward pool depends on two major factors:")]),e._v(" "),n("ul",[n("li",[n("strong",[e._v("S")]),e._v(": The total amount of staking, and")]),e._v(" "),n("li",[n("strong",[e._v("R")]),e._v(": The reward rate per annum.")])]),e._v(" "),n("p",[e._v("Specifically, this reward rate "),n("code",[e._v("R")]),e._v(" can be expressed by the following function:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("R = (R0 / 1000) * exp(-S / tau)\n")])])]),n("p",[e._v("To visualize this, if we set "),n("code",[e._v("tau=10 Billion")]),e._v(", "),n("code",[e._v("R0=350")]),e._v(", we have the following graph of the function:")]),e._v(" "),n("p",[n("img",{attrs:{src:a(357),alt:""}})]),e._v(" "),n("p",[e._v("Note that the above reward rate is per annum, and the number of tokens being released to the reward pool ("),n("strong",[e._v("N")]),e._v(") for that epoch is calculated by")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("N = S  *  ( (1 + R) ^ (1 / f) - 1 )\n")])])]),n("p",[e._v("where "),n("code",[e._v("S")]),e._v(" is the total amount of tokens staked by validators to participate in the consensus process; "),n("code",[e._v("R0")]),e._v(" is the upper bound for the reward rate; "),n("code",[e._v("tau")]),e._v(" is a time-dependent variable that controls the exponential rate; "),n("code",[e._v("f")]),e._v(" is the frequency of reward being distributed per year.")]),e._v(" "),n("p",[e._v(":::tip Example: If the reward rate is 28% with total staking of 500 million and the reward is being distributed every day, the number of tokens being released to the reward pool at the end of the day will be\n"),n("code",[e._v("500,000,000 * ( (1+0.28)^(1/365) - 1) = 338,278")]),e._v("\n:::")]),e._v(" "),n("p",[e._v("More details about the actual calculation and its configuration can be found in the next section.")]),e._v(" "),n("h3",{attrs:{id:"rewards-network-parameters-for-monetary-expansion"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rewards-network-parameters-for-monetary-expansion"}},[e._v("#")]),e._v(" Rewards: Network parameters for monetary expansion")]),e._v(" "),n("p",[e._v("Monetary expansion is designed to release tokens from the reserve account to the reward pool, while keeping a fixed maximum total supply.")]),e._v(" "),n("p",[e._v("Precisely, the reward rate is controlled by the following parameters:")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("monetary_expansion_cap")]),e._v(": The total amount of tokens reserved for validator's reward in the basic unit")]),e._v(" "),n("li",[n("code",[e._v("reward_period_seconds")]),e._v(": The period of reward being distributed")]),e._v(" "),n("li",[n("code",[e._v("monetary_expansion_r0")]),e._v(": The upper bound for the reward rate per annum")]),e._v(" "),n("li",[n("code",[e._v("monetary_expansion_tau")]),e._v(": Initial value of tau in the reward function")]),e._v(" "),n("li",[n("code",[e._v("monetary_expansion_decay")]),e._v(": The decay rate of tau.")])]),e._v(" "),n("p",[e._v("You can find the configuration under the "),n("code",[e._v("rewards_params")]),e._v(" section of the genesis file "),n("code",[e._v("genesis.json")]),e._v(" in "),n("code",[e._v("./tendermint/config")]),e._v(",\n:::details Example: Reward configuration in the genesis")]),e._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"app_state"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"network_params"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("...")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"rewards_config"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"reward_period_seconds"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("86400")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("  # range"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"monetary_expansion_r0"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("450")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"monetary_expansion_tau"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("14500000000000000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"monetary_expansion_decay"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("999860")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("  # range"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("1000000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n        "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"monetary_expansion_cap"')]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"2250000000000000000"')]),e._v(" # range"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("100_00000000_00000000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),n("p",[e._v("represents a daily scheduled reward (every "),n("code",[e._v("86400")]),e._v(" seconds), with a maximum reward rate of "),n("em",[e._v("45%")]),e._v(" per annum, distributing a total sum of 22.5 billion tokens to the validators.\n:::")]),e._v(" "),n("p",[e._v("::: details Reward parameters explained:\nHere is a simple example of how these configuration parameters affect the reward distribution when assuming the amount of total staking is fixed:\n"),n("img",{attrs:{src:a(358),alt:""}})]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Firstly, "),n("code",[e._v("monetary_expansion_cap")]),e._v(" controls the total amount of tokens reserved for validator's reward ("),n("strong",[e._v("Total rewards allocation")]),e._v("). Note that this number can not exceed the total supply of tokens (i.e. 100 Billion )")])]),e._v(" "),n("li",[n("p",[e._v("Two initial values control the amount of the reward rate at the beginning; these are:")])])]),e._v(" "),n("ul",[n("li",[n("code",[e._v("monetary_expansion_r0")]),e._v(", a positive number represents the upper bound for the reward rate per annum;")]),e._v(" "),n("li",[n("code",[e._v("monetary_expansion_tau")]),e._v(", the initial value of tau in the reward function.")])]),e._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("p",[e._v("Afterwards, we calculate the reward rate for that epoch by the total staking amount, value of "),n("code",[e._v("tau")]),e._v(" and the constant "),n("code",[e._v("monetary_expansion_r0")]),e._v(". The final reward for validators will be the product of the reward rate and the total staking amount.")])]),e._v(" "),n("li",[n("p",[e._v("Lastly, the rewards will be distributed to the validators based on the number of blocks they have proposed in that reward epoch.(see "),n("a",{attrs:{href:"#reward-distribution"}},[e._v("reward distribution")]),e._v(" for details)")])])]),e._v(" "),n("p",[n("em",[e._v("Remarks")]),e._v(": The reward rate of shrinks in general after each reward epoch. The contraction rate is controlled by "),n("code",[e._v("monetary_expansion_decay")]),e._v(", which is the decay rate of tau in the reward function.")]),e._v(" "),n("p",[e._v("Note that this is an exponential decay function, where the index of it controls the “steepness” of the curve. Precisely, this damping factor controls the exponential decay rate of the reward function. The parameter "),n("code",[e._v("tau")]),e._v(" will decay each time rewards get distributed:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('tau(n) = tau(n-1) * rewards_config["monetary_expansion_decay"]\n')])])]),n("p",[e._v("In addition to that, "),n("code",[e._v("reward_period_seconds")]),e._v(" controls how often the reward is being distributed.")]),e._v(" "),n("p",[e._v(":::")]),e._v(" "),n("p",[e._v("At the end of each reward epoch, the number of tokens being released at each period is defined as:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    R0 = rewards_config["monetary_expansion_r0"]\n    tau = rewards_config["monetary_expansion_tau"]\n    P = rewards_config["reward_period_seconds"]\n\n    # total bonded amount of the active validators\n    at the end of the reward epoch\n    S = total_staking\n\n    # seconds of a year\n    Y = 365 * 24 * 60 * 60\n\n    R = (R0 / 1000) * exp(-S / tau)\n    N = floor(S * (pow(1 + R, P / Y) - 1))\n    N = N - N % 10000\n\n    N: released coins\n    S: total stakings at current block when\n       reward distribution happens\n    R0: upper bound for the reward rate p.a.\n')])])]),n("p",[e._v("Using the example of "),n("code",[e._v("tau=10 Billion")]),e._v(" and "),n("code",[e._v("R0=350")]),e._v(", the following graph shows how the reward rate deforming when "),n("code",[e._v("tau")]),e._v(" is dropping by 5% every year:")]),e._v(" "),n("p",[n("img",{attrs:{src:a(359),alt:""}})]),e._v(" "),n("p",[e._v("The rewards validator received goes to the bonded balance of their staking account, and results in validator "),n("a",{attrs:{href:"#end/commit_block_state_update"}},[e._v("voting power change")]),e._v(" accordingly.")]),e._v(" "),n("h3",{attrs:{id:"reward-distribution"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reward-distribution"}},[e._v("#")]),e._v(" Reward distribution")]),e._v(" "),n("p",[e._v("Rewards are distributed periodically (e.g. daily), which is determined by the "),n("RouterLink",{attrs:{to:"/getting-started/network-parameters.html"}},[e._v("network parameter")]),e._v(" "),n("code",[e._v("reward_period_seconds")]),e._v(". Rewards are accumulated during each period, block proposers and the total voting power of all validators are recorded.")],1),e._v(" "),n("p",[e._v('At the end of each reward period, validators will receive a portion of the "reward pool" as a reward for participating in the consensus process. Specifically, the reward of a validator is proportional to its contribution to the consensus process; it is calculated as follows:')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("rewards of a validator = total rewards in the pool * [Validatior's contribution] / [Sum of the voting power],\n")])])]),n("p",[e._v("where")]),e._v(" "),n("ul",[n("li",[n("p",[n("em",[e._v('"Validator\'s contribution"')]),e._v(" is the total sum of the voting power participating in the consensus process by the validator throughout the reward period; and")])]),e._v(" "),n("li",[n("p",[n("em",[e._v('"Sum of the voting power"')]),e._v(" represents the total sum of the voting power involved in the consensus process from all of the active validators throughout the reward period.")])])]),e._v(" "),n("p",[e._v("The remainder of division will become rewards of the next period.")]),e._v(" "),n("h3",{attrs:{id:"rewards-documentation-and-its-interactions-with-abci"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rewards-documentation-and-its-interactions-with-abci"}},[e._v("#")]),e._v(" Rewards: Documentation and its interactions with ABCI")]),e._v(" "),n("p",[e._v("The detailed documentation of the reward mechanism can be found in "),n("a",{attrs:{href:"https://github.com/crypto-com/chain-docs/blob/master/docs/modules/reward.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("h2",{attrs:{id:"validator-punishments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#validator-punishments"}},[e._v("#")]),e._v(" Validator Punishments")]),e._v(" "),n("p",[e._v("This part describes functionality that aims to dis-incentivize network-observable actions, such as faulty validations,\nof participants with values at stake by penalizing/slashing and jailing them. The penalties may include losing some\namount of their stake (surrendered to the rewards pool), losing their ability to perform the network functionality for a\nperiod of time, collect rewards etc.")]),e._v(" "),n("h3",{attrs:{id:"punishments-network-parameters-for-slashing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#punishments-network-parameters-for-slashing"}},[e._v("#")]),e._v(" Punishments: Network Parameters for slashing")]),e._v(" "),n("p",[e._v("Below are all the network parameters used to configure the behavior of validator punishments. Details of all these\nparameters and their effect on behavior of validator punishments is discussed later in this document.")]),e._v(" "),n("ol",[n("li",[n("code",[e._v("UNBONDING_PERIOD")]),e._v(": Unbonding period will be used as jailing period (time for which an account is jailed after it\ngets punished) and also as slashing period (time to wait before slashing funds from an account). This should be\ngreater than or equal to "),n("code",[e._v("MAX_EVIDENCE_AGE")]),e._v(" in tendermint.")]),e._v(" "),n("li",[n("code",[e._v("BLOCK_SIGNING_WINDOW")]),e._v(": Number of blocks for which the liveness is calculated for uptime tracking.")]),e._v(" "),n("li",[n("code",[e._v("MISSED_BLOCK_THRESHOLD")]),e._v(": Maximum number of blocks with faulty/missed validations allowed for an account in last\n"),n("code",[e._v("BLOCK_SIGNING_WINDOW")]),e._v(" blocks before it gets jailed.")]),e._v(" "),n("li",[n("code",[e._v("LIVENESS_SLASH_PERCENT")]),e._v(": Percentage of funds (bonded + unbonded) slashed when a validator is non-live.")]),e._v(" "),n("li",[n("code",[e._v("BYZANTINE_SLASH_PERCENT")]),e._v(": Percentage of funds (bonded + unbonded) slashed when validator makes a byzantine fault.")])]),e._v(" "),n("p",[e._v(":::warning Important:\nDuring slashing, funds are slashed from both, bonded and unbonded, amounts.\n:::")]),e._v(" "),n("h3",{attrs:{id:"overview"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),n("p",[e._v("Punishments for a validator are triggered when they either make a "),n("em",[e._v("byzantine fault")]),e._v(" or become "),n("em",[e._v("non-live")]),e._v(":")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Liveness Faults (Low availability)")]),e._v(" "),n("p",[e._v("A validator is said to be "),n("strong",[e._v("non-live")]),e._v(" when they fail to sign at least "),n("code",[e._v("MISSED_BLOCK_THRESHOLD")]),e._v(" blocks in\nlast "),n("code",[e._v("BLOCK_SIGNING_WINDOW")]),e._v(" blocks successfully. "),n("code",[e._v("BLOCK_SIGNING_WINDOW")]),e._v(" and "),n("code",[e._v("MISSED_BLOCK_THRESHOLD")]),e._v(" are network\nparameters and can be configured during genesis (currently, changing these network parameters at runtime is not\nsupported). Tendermint passes signing information to ABCI application as "),n("code",[e._v("last_commit_info")]),e._v(" in "),n("code",[e._v("BeginBlock")]),e._v(" request.")])])]),e._v(" "),n("p",[e._v(":::tip Example:\nFor example, if "),n("code",[e._v("BLOCK_SIGNING_WINDOW")]),e._v(" is "),n("code",[e._v("100")]),e._v(" blocks and "),n("code",[e._v("MISSED_BLOCK_THRESHOLD")]),e._v(" is "),n("code",[e._v("50")]),e._v(" blocks, a validator will\nbe marked as "),n("strong",[e._v("non-live")]),e._v(" if they fail to successfully sign at least "),n("code",[e._v("50")]),e._v(" blocks in last "),n("code",[e._v("100")]),e._v(" blocks.\n:::")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("Byzantine Faults (Double signing)")]),e._v(" "),n("p",[e._v("A validator is said to make a byzantine fault when they sign conflicting messages/blocks at the same height and\nround. Tendermint has mechanisms to publish evidence of validators that signed conflicting votes (it passes this\ninformation to ABCI application in "),n("code",[e._v("BeginBlock")]),e._v(" request), so they can be punished by the application.")])])]),e._v(" "),n("p",[e._v(":::tip Implementation note:\nTendermint passes "),n("code",[e._v("Evidence")]),e._v(" of a byzantine validator in "),n("code",[e._v("BeginBlock")]),e._v(" request. Before jailing any account because of\nbyzantine fault, that evidence should be verified. Also, it should be checked that evidence provided by tendermint is\nnot older than "),n("code",[e._v("MAX_EVIDENCE_AGE")]),e._v(" in tendermint.\n:::")]),e._v(" "),n("h3",{attrs:{id:"inactivity-slashing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inactivity-slashing"}},[e._v("#")]),e._v(" Inactivity Slashing")]),e._v(" "),n("p",[e._v("It is important that the validators maintain excellent availability and network connectivity to perform their tasks. A penalty should be imposed on validators' misbehavior to reinforce this.")]),e._v(" "),n("p",[e._v("When a validator fails to successfully sign "),n("code",[e._v("MISSED_BLOCK_THRESHOLD")]),e._v(" blocks in last "),n("code",[e._v("BLOCK_SIGNING_WINDOW")]),e._v(" blocks, it is\nimmediately punished by deducting funds from their bonded and unbonded amount and removing them from active validator set. The funds to be deducted are calculated based on "),n("code",[e._v("LIVENESS_SLASH_PERCENT")]),e._v(".")]),e._v(" "),n("p",[e._v(":::tip Note:\nThe validator is not "),n("strong",[e._v("jailed")]),e._v(" in this scenario. They can immediately send a "),n("code",[e._v("NodeJoinTx")]),e._v(" to join back as a validator if they are qualified (have enough bonded amount and not jailed).\n:::")]),e._v(" "),n("h3",{attrs:{id:"jailing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jailing"}},[e._v("#")]),e._v(" Jailing")]),e._v(" "),n("p",[e._v("A validator is jailed when they make a byzantine fault, e.g., they sign messages at same height and round.")]),e._v(" "),n("p",[e._v("When a validator gets jailed, they cannot perform any operations relating to their account, for example,\n"),n("code",[e._v("withdraw_stake")]),e._v(", "),n("code",[e._v("deposit_stake")]),e._v(", "),n("code",[e._v("unbond_stake")]),e._v(", etc., until they are un-jailed. Also, a validator cannot be un-jailed\nbefore "),n("code",[e._v("account.jailed_until")]),e._v(" which is set to "),n("code",[e._v("block_time + UNBONDING_PERIOD")]),e._v(" while jailing. "),n("code",[e._v("UNBONDING_PERIOD")]),e._v(" is a\nnetwork parameter which can be configured during genesis.")]),e._v(" "),n("p",[e._v(":::warning Important:\n"),n("code",[e._v("block_time")]),e._v(" used in calculating "),n("code",[e._v("account.jailed_until")]),e._v(" should be the time of the block at which the fault is detected\n(i.e., "),n("code",[e._v("current_block_height")]),e._v(").\n:::")]),e._v(" "),n("p",[e._v(":::warning Important:\nWhen a validator is jailed because of a byzantine fault, their validator public key is added to a list of permanently\nbanned validators and cannot re-join the network as a validator with same public key.\n:::")]),e._v(" "),n("h4",{attrs:{id:"un-jailing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#un-jailing"}},[e._v("#")]),e._v(" Un-jailing")]),e._v(" "),n("p",[e._v("When a jailed validator wishes to resume normal operations (after "),n("code",[e._v("account.jailed_until")]),e._v(" has passed), they can create\n"),n("code",[e._v("UnjailTx")]),e._v(" which marks them as un-jailed. After successful un-jailing, validators can submit a "),n("code",[e._v("UnbondTx")]),e._v(" and\n"),n("code",[e._v("WithdrawTx")]),e._v(" to withdraw their funds.")]),e._v(" "),n("h3",{attrs:{id:"byzantine-slashing"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#byzantine-slashing"}},[e._v("#")]),e._v(" Byzantine Slashing")]),e._v(" "),n("p",[e._v("Validators are responsible for signing or proposing block at each consensus round. A penalty should be imposed on validators' misbehavior to reinforce this. When there is byzantine fault detected, they are immediately slashed other than jailed. During the jailing time, it won't be slashed again for other byzantine faults. The funds to be deducted are calculated based on "),n("code",[e._v("BYZANTINE_SLASH_PERCENT")]),e._v(".")]),e._v(" "),n("p",[e._v(":::warning Important:\nA validator should not be slashed more than once for byzantine faults within "),n("code",[e._v("UNBONDING_PERIOD")]),e._v(". If a validator commits multiple byzantine faults\nwithin that time period, it should only be slashed once (for simplicity, we'll only slash the validator for the first\nevidence that we get from tendermint and ignore other evidences until "),n("code",[e._v("UNBONDING_PERIOD")]),e._v(").\n:::")]),e._v(" "),n("p",[e._v(":::tip Implementation note:\nTo enforce that we only slash an account only once within "),n("code",[e._v("UNBONDING_PERIOD")]),e._v(", we can just check if an account is\nnot jailed when we receive evidence of misbehavior from tendermint.\n:::")]),e._v(" "),n("h3",{attrs:{id:"punishments-documentation-and-its-interactions-with-abci"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#punishments-documentation-and-its-interactions-with-abci"}},[e._v("#")]),e._v(" Punishments: Documentation and its interactions with ABCI")]),e._v(" "),n("p",[e._v("The detailed documentation of the slashing mechanism can be found in "),n("a",{attrs:{href:"https://github.com/crypto-com/chain-docs/blob/master/docs/modules/punishment.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),n("OutboundLink")],1)]),e._v(" "),n("h3",{attrs:{id:"appendix"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#appendix"}},[e._v("#")]),e._v(" Appendix")]),e._v(" "),n("h4",{attrs:{id:"reward-related-network-parameters-configuration"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reward-related-network-parameters-configuration"}},[e._v("#")]),e._v(" Reward related network parameters configuration")]),e._v(" "),n("p",[e._v("The following tables show overall effects on different configuration of the reward related network parameters:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Key")]),e._v(" "),n("th",[n("code",[e._v("monetary_expansion_cap")])]),e._v(" "),n("th",[n("code",[e._v("reward_period_seconds")])]),e._v(" "),n("th",[n("code",[e._v("monetary_expansion_decay")])])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("Higher")]),e._v(" "),n("td",[e._v("More reserved validator reward")]),e._v(" "),n("td",[e._v("Less frequent reward distribution")]),e._v(" "),n("td",[e._v("Tau decays slower")])]),e._v(" "),n("tr",[n("td",[e._v("Lower")]),e._v(" "),n("td",[e._v("Less reserved validator reward")]),e._v(" "),n("td",[e._v("More frequent reward distribution")]),e._v(" "),n("td",[e._v("Tau decays faster")])]),e._v(" "),n("tr",[n("td",[e._v("Constraints")]),e._v(" "),n("td",[e._v("Less than the maximum token supply")]),e._v(" "),n("td",[e._v("Value has to be positive")]),e._v(" "),n("td",[e._v("Positive value less than 1000000")])]),e._v(" "),n("tr",[n("td",[e._v("Sample configuration")]),e._v(" "),n("td",[e._v("2e18 (20% of the total supply)")]),e._v(" "),n("td",[e._v("86400 (reward distributed daily)")]),e._v(" "),n("td",[e._v("999860 (Tau dropped by 5% yearly)")])])])]),e._v(" "),n("p",[e._v("For initial values:")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Key")]),e._v(" "),n("th",[n("code",[e._v("monetary_expansion_r0")])]),e._v(" "),n("th",[n("code",[e._v("monetary_expansion_tau")])])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("Higher")]),e._v(" "),n("td",[e._v("Higher ceiling for reward rate")]),e._v(" "),n("td",[e._v("Steeper exponential curve")])]),e._v(" "),n("tr",[n("td",[e._v("Lower")]),e._v(" "),n("td",[e._v("Lower ceiling for reward rate")]),e._v(" "),n("td",[e._v("Flatter exponential curve")])]),e._v(" "),n("tr",[n("td",[e._v("Constraints")]),e._v(" "),n("td",[e._v("Value has to be positive")]),e._v(" "),n("td",[e._v("Value has to be positive")])]),e._v(" "),n("tr",[n("td",[e._v("Sample configuration")]),e._v(" "),n("td",[e._v("350 (35% reward rate p.a.)")]),e._v(" "),n("td",[e._v("10 Billion")])])])])])}),[],!1,null,null,null);t.default=r.exports}}]);